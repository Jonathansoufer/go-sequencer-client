// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.6
// source: frost-service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FrostAPIServiceClient is the client API for FrostAPIService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FrostAPIServiceClient interface {
	SubmitFrostMessage(ctx context.Context, in *SubmitFrostMessageRequest, opts ...grpc.CallOption) (*SubmitFrostMessageResponse, error)
	// This RPC allows a client to open a bidirectional stream with a Topos Node
	WatchFrostMessages(ctx context.Context, opts ...grpc.CallOption) (FrostAPIService_WatchFrostMessagesClient, error)
}

type frostAPIServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFrostAPIServiceClient(cc grpc.ClientConnInterface) FrostAPIServiceClient {
	return &frostAPIServiceClient{cc}
}

func (c *frostAPIServiceClient) SubmitFrostMessage(ctx context.Context, in *SubmitFrostMessageRequest, opts ...grpc.CallOption) (*SubmitFrostMessageResponse, error) {
	out := new(SubmitFrostMessageResponse)
	err := c.cc.Invoke(ctx, "/topos.topos_node.v1.FrostAPIService/SubmitFrostMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *frostAPIServiceClient) WatchFrostMessages(ctx context.Context, opts ...grpc.CallOption) (FrostAPIService_WatchFrostMessagesClient, error) {
	stream, err := c.cc.NewStream(ctx, &FrostAPIService_ServiceDesc.Streams[0], "/topos.topos_node.v1.FrostAPIService/WatchFrostMessages", opts...)
	if err != nil {
		return nil, err
	}
	x := &frostAPIServiceWatchFrostMessagesClient{stream}
	return x, nil
}

type FrostAPIService_WatchFrostMessagesClient interface {
	Send(*WatchFrostMessagesRequest) error
	Recv() (*WatchFrostMessagesResponse, error)
	grpc.ClientStream
}

type frostAPIServiceWatchFrostMessagesClient struct {
	grpc.ClientStream
}

func (x *frostAPIServiceWatchFrostMessagesClient) Send(m *WatchFrostMessagesRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *frostAPIServiceWatchFrostMessagesClient) Recv() (*WatchFrostMessagesResponse, error) {
	m := new(WatchFrostMessagesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FrostAPIServiceServer is the server API for FrostAPIService service.
// All implementations must embed UnimplementedFrostAPIServiceServer
// for forward compatibility
type FrostAPIServiceServer interface {
	SubmitFrostMessage(context.Context, *SubmitFrostMessageRequest) (*SubmitFrostMessageResponse, error)
	// This RPC allows a client to open a bidirectional stream with a Topos Node
	WatchFrostMessages(FrostAPIService_WatchFrostMessagesServer) error
	mustEmbedUnimplementedFrostAPIServiceServer()
}

// UnimplementedFrostAPIServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFrostAPIServiceServer struct {
}

func (UnimplementedFrostAPIServiceServer) SubmitFrostMessage(context.Context, *SubmitFrostMessageRequest) (*SubmitFrostMessageResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitFrostMessage not implemented")
}
func (UnimplementedFrostAPIServiceServer) WatchFrostMessages(FrostAPIService_WatchFrostMessagesServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchFrostMessages not implemented")
}
func (UnimplementedFrostAPIServiceServer) mustEmbedUnimplementedFrostAPIServiceServer() {}

// UnsafeFrostAPIServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FrostAPIServiceServer will
// result in compilation errors.
type UnsafeFrostAPIServiceServer interface {
	mustEmbedUnimplementedFrostAPIServiceServer()
}

func RegisterFrostAPIServiceServer(s grpc.ServiceRegistrar, srv FrostAPIServiceServer) {
	s.RegisterService(&FrostAPIService_ServiceDesc, srv)
}

func _FrostAPIService_SubmitFrostMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitFrostMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FrostAPIServiceServer).SubmitFrostMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/topos.topos_node.v1.FrostAPIService/SubmitFrostMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FrostAPIServiceServer).SubmitFrostMessage(ctx, req.(*SubmitFrostMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _FrostAPIService_WatchFrostMessages_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FrostAPIServiceServer).WatchFrostMessages(&frostAPIServiceWatchFrostMessagesServer{stream})
}

type FrostAPIService_WatchFrostMessagesServer interface {
	Send(*WatchFrostMessagesResponse) error
	Recv() (*WatchFrostMessagesRequest, error)
	grpc.ServerStream
}

type frostAPIServiceWatchFrostMessagesServer struct {
	grpc.ServerStream
}

func (x *frostAPIServiceWatchFrostMessagesServer) Send(m *WatchFrostMessagesResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *frostAPIServiceWatchFrostMessagesServer) Recv() (*WatchFrostMessagesRequest, error) {
	m := new(WatchFrostMessagesRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FrostAPIService_ServiceDesc is the grpc.ServiceDesc for FrostAPIService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FrostAPIService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "topos.topos_node.v1.FrostAPIService",
	HandlerType: (*FrostAPIServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SubmitFrostMessage",
			Handler:    _FrostAPIService_SubmitFrostMessage_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchFrostMessages",
			Handler:       _FrostAPIService_WatchFrostMessages_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "frost-service.proto",
}
